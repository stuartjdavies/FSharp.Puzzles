<?xml version="1.0" encoding="utf-8" standalone="no"?>
<!--This file represents the results of running a test suite-->
<test-results name="C:\Users\stuart\Documents\GitHub\FSharp.Puzzles\FSharp.Puzzles.Tests\bin\Debug\FSharp.Puzzles.Tests.dll" total="23" errors="1" failures="0" not-run="0" inconclusive="0" ignored="0" skipped="0" invalid="0" date="2015-10-06" time="23:26:03">
  <environment nunit-version="2.6.4.14350" clr-version="2.0.50727.8009" os-version="Microsoft Windows NT 6.2.9200.0" platform="Win32NT" cwd="C:\Program Files (x86)\NUnit 2.6.4\bin" machine-name="STUART-HP" user="stuart" user-domain="STUART-HP" />
  <culture-info current-culture="en-AU" current-uiculture="en-US" />
  <test-suite type="Assembly" name="C:\Users\stuart\Documents\GitHub\FSharp.Puzzles\FSharp.Puzzles.Tests\bin\Debug\FSharp.Puzzles.Tests.dll" executed="True" result="Failure" success="False" time="1.987" asserts="0">
    <results>
      <test-suite type="Namespace" name="FSharp" executed="True" result="Success" success="True" time="1.648" asserts="0">
        <results>
          <test-suite type="Namespace" name="Puzzles" executed="True" result="Success" success="True" time="1.647" asserts="0">
            <results>
              <test-suite type="Namespace" name="Tests" executed="True" result="Success" success="True" time="1.647" asserts="0">
                <results>
                  <test-suite type="TestFixture" name="Puzzle 1: Take the Nth Element from the tail" executed="True" result="Success" success="True" time="0.177" asserts="0">
                    <results>
                      <test-case name="FSharp.Puzzles.Tests.Puzzle 1: Take the Nth Element from the tail.Verify example sample input equals sample expected output" executed="True" result="Success" success="True" time="0.154" asserts="8" />
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Puzzle 2: Determine triangle type from the lengths of the sides" executed="True" result="Success" success="True" time="0.067" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="Verify Equilateral is returned when their are three equal sides" executed="True" result="Success" success="True" time="0.020" asserts="0">
                        <results>
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 2: Determine triangle type from the lengths of the sides.Verify Equilateral is returned when their are three equal sides&lt;Single&gt;(1.0f,1.0f,1.0f)" executed="True" result="Success" success="True" time="0.005" asserts="1" />
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 2: Determine triangle type from the lengths of the sides.Verify Equilateral is returned when their are three equal sides&lt;Single&gt;(2.2f,2.2f,2.2f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="Verify isosceles is returned when there are two equal sides and one unequal side" executed="True" result="Success" success="True" time="0.015" asserts="0">
                        <results>
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 2: Determine triangle type from the lengths of the sides.Verify isosceles is returned when there are two equal sides and one unequal side&lt;Single&gt;(1.0f,2.0f,1.0f)" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 2: Determine triangle type from the lengths of the sides.Verify isosceles is returned when there are two equal sides and one unequal side&lt;Single&gt;(2.0f,1.0f,1.0f)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                      <test-suite type="ParameterizedTest" name="Verify Scalene is returned when there are no equal sides" executed="True" result="Success" success="True" time="0.005" asserts="0">
                        <results>
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 2: Determine triangle type from the lengths of the sides.Verify Scalene is returned when there are no equal sides&lt;Single&gt;(5.0f,4.0f,3.0f)" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Puzzle 3: Reverse the words in a string" executed="True" result="Success" success="True" time="0.056" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="Given a sentence verify that the words are reversed correctly" executed="True" result="Success" success="True" time="0.055" asserts="0">
                        <results>
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 3: Reverse the words in a string.Given a sentence verify that the words are reversed correctly&lt;String&gt;(&quot;Hello I am here&quot;,&quot;olleH I ma ereh&quot;)" executed="True" result="Success" success="True" time="0.020" asserts="1" />
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 3: Reverse the words in a string.Given a sentence verify that the words are reversed correctly&lt;String&gt;(&quot;Cat and dog&quot;,&quot;taC dna god&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 3: Reverse the words in a string.Given a sentence verify that the words are reversed correctly&lt;String&gt;(&quot;I am here&quot;,&quot;I ma ereh&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 3: Reverse the words in a string.Given a sentence verify that the words are reversed correctly&lt;String&gt;(&quot;There is a  apple here  &quot;,&quot;erehT si a  elppa ereh  &quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 3: Reverse the words in a string.Given a sentence verify that the words are reversed correctly&lt;String&gt;(&quot;&quot;,&quot;&quot;)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Puzzle 4: Is it Possible" executed="True" result="Success" success="True" time="0.028" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="Verify sample input vs sample output" executed="True" result="Success" success="True" time="0.027" asserts="0">
                        <results>
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 4: Is it Possible.Verify sample input vs sample output&lt;Boolean&gt;(1,4,5,9,True)" executed="True" result="Success" success="True" time="0.008" asserts="1" />
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 4: Is it Possible.Verify sample input vs sample output&lt;Boolean&gt;(2,2,6,8,True)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 4: Is it Possible.Verify sample input vs sample output&lt;Boolean&gt;(2,2,5,9,False)" executed="True" result="Success" success="True" time="0.000" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Puzzle 5: Closest Numbers" executed="True" result="Success" success="True" time="0.069" asserts="0">
                    <results>
                      <test-suite type="ParameterizedTest" name="Verify sample input vs sample output" executed="True" result="Success" success="True" time="0.068" asserts="0">
                        <results>
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 5: Closest Numbers.Verify sample input vs sample output(System.Int32[],System.Int32[],50)" executed="True" result="Success" success="True" time="0.066" asserts="1" />
                        </results>
                      </test-suite>
                    </results>
                  </test-suite>
                  <test-suite type="TestFixture" name="Puzzle 6: Robot" executed="True" result="Success" success="True" time="1.172" asserts="0">
                    <results>
                      <test-case name="FSharp.Puzzles.Tests.Puzzle 6: Robot.Use QuickCheck to place robot in various spots and validate the result against another range check algorithm" executed="True" result="Success" success="True" time="1.090" asserts="6" />
                      <test-suite type="ParameterizedTest" name="Verify the test cases given in the specification" executed="True" result="Success" success="True" time="0.046" asserts="0">
                        <results>
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 6: Robot.Verify the test cases given in the specification(&quot;..\\..\\..\\TestData\\Puzzle6_TestCaseA.txt&quot;)" executed="True" result="Success" success="True" time="0.022" asserts="1" />
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 6: Robot.Verify the test cases given in the specification(&quot;..\\..\\..\\TestData\\Puzzle6_TestCaseB.txt&quot;)" executed="True" result="Success" success="True" time="0.003" asserts="1" />
                          <test-case name="FSharp.Puzzles.Tests.Puzzle 6: Robot.Verify the test cases given in the specification(&quot;..\\..\\..\\TestData\\Puzzle6_TestCaseC.txt&quot;)" executed="True" result="Success" success="True" time="0.001" asserts="1" />
                        </results>
                      </test-suite>
                      <test-case name="FSharp.Puzzles.Tests.Puzzle 6: Robot.When REPORT is called after two invalid actions the result should be None" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                      <test-case name="FSharp.Puzzles.Tests.Puzzle 6: Robot.When REPORT is called when no actions have been issued the result should be None" executed="True" result="Success" success="True" time="0.002" asserts="1" />
                    </results>
                  </test-suite>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
      <test-suite type="Namespace" name="NUnit" executed="True" result="Failure" success="False" time="0.272" asserts="0">
        <results>
          <test-suite type="TestFixture" name="TickSpec+Feature" executed="True" result="Success" success="True" time="0.224" asserts="0">
            <results>
              <test-suite type="ParameterizedTest" name="TestScenario" executed="True" result="Success" success="True" time="0.221" asserts="0">
                <results>
                  <test-case name="NUnit.TickSpec+Feature.TestScenario(Scenario 1: Refunded items should be returned to stock)" executed="True" result="Success" success="True" time="0.220" asserts="1" />
                </results>
              </test-suite>
            </results>
          </test-suite>
          <test-suite type="TestFixture" name="TickSpec+RosalindRNA" executed="True" result="Failure" success="False" time="0.034" asserts="0">
            <results>
              <test-suite type="ParameterizedTest" name="TestScenario" executed="True" result="Failure" success="False" time="0.033" asserts="0">
                <results>
                  <test-case name="NUnit.TickSpec+RosalindRNA.TestScenario(Scenario 1: Verify expected result from sample data)" executed="True" result="Error" success="False" time="0.030" asserts="0">
                    <failure>
                      <message><![CDATA[TickSpec.StepException : Missing step definition on line 4 in Feature: Transcribing DNA into RNA
	"Given a DNA string "GATGGAACTTGACTACGTAAATT""]]></message>
                      <stack-trace><![CDATA[at <StartupCode$TickSpec>.$TickSpec.fail@66[a](String feature, ScenarioSource scenario, LineSource line, String e)
at TickSpec.StepDefinitions.resolveLine(String feature, ScenarioSource scenario, StepType step, LineSource line)
at <StartupCode$TickSpec>.$TickSpec.lines@203-3.Invoke(Tuple`2 tupledArg)
at Microsoft.FSharp.Collections.IEnumerator.map@116.DoMoveNext(b& )
at Microsoft.FSharp.Collections.IEnumerator.MapEnumerator`1.System-Collections-IEnumerator-MoveNext()
at Microsoft.FSharp.Collections.SeqModule.ToArray[T](IEnumerable`1 source)
at <StartupCode$TickSpec>.$TickSpec.genType@200(StepDefinitions this, String feature, FeatureGen gen, ScenarioSource scenario)
at System.Lazy`1.CreateValue()
at System.Lazy`1.LazyInitValue()
at <StartupCode$TickSpec>.$TickSpec.createAction@212-1.Invoke()
at NUnit.TickSpec.FeatureFixture.TestScenario(Scenario scenario) in C:\Users\stuart\Documents\GitHub\FSharp.Puzzles\FSharp.Puzzles.Tests\Fixtures.fs:line 20
]]></stack-trace>
                    </failure>
                  </test-case>
                </results>
              </test-suite>
            </results>
          </test-suite>
        </results>
      </test-suite>
    </results>
  </test-suite>
</test-results>