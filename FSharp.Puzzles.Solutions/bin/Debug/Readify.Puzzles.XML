<?xml version="1.0" encoding="utf-8"?>
<doc>
<assembly><name>Readify.Puzzles</name></assembly>
<members>
<member name="T:FSharp.Puzzles.Solutions.Rop.RopResult`2">
<summary>
 A Result is a success or failure
 The Success case has a success value, plus a list of messages
 The Failure case has just a list of messages
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.failIfNoneR``2(``0,Microsoft.FSharp.Core.FSharpOption{FSharp.Puzzles.Solutions.Rop.RopResult{``1,``0}})">
<summary>
 given an RopResult option, return it
 or the given message if None
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.failIfNone``2(``0,Microsoft.FSharp.Core.FSharpOption{``1})">
<summary>
 lift an option to a RopResult.
 Return Success if Some
 or the given message if None
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.valueOrDefault``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``0},``1},FSharp.Puzzles.Solutions.Rop.RopResult{``1,``0})">
<summary>
 given an RopResult, in the success case, return the value.
 In the failure case, determine the value to return by 
 applying a function to the errors in the failure case
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.mapMessagesR``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},FSharp.Puzzles.Solutions.Rop.RopResult{``2,``0})">
<summary>
 given an RopResult, map the messages to a different error type
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.failureTee``2(Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``0},Microsoft.FSharp.Core.Unit},FSharp.Puzzles.Solutions.Rop.RopResult{``1,``0})">
<summary>
 given an RopResult, call a unit function on the failure branch
 and pass thru the result
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.successTee``2(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,Microsoft.FSharp.Collections.FSharpList{``1}},Microsoft.FSharp.Core.Unit},FSharp.Puzzles.Solutions.Rop.RopResult{``0,``1})">
<summary>
 given an RopResult, call a unit function on the success branch
 and pass thru the result
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.mapR``3">
<summary>
 synonym for liftR
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.op_LessBangGreater``3">
<summary>
 infix version of liftR
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.lift4R``6(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,Microsoft.FSharp.Core.FSharpFunc{``3,``4}}}},FSharp.Puzzles.Solutions.Rop.RopResult{``0,``5},FSharp.Puzzles.Solutions.Rop.RopResult{``1,``5},FSharp.Puzzles.Solutions.Rop.RopResult{``2,``5},FSharp.Puzzles.Solutions.Rop.RopResult{``3,``5})">
<summary>
 given four values wrapped in results apply a function to all
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.lift3R``5(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,Microsoft.FSharp.Core.FSharpFunc{``2,``3}}},FSharp.Puzzles.Solutions.Rop.RopResult{``0,``4},FSharp.Puzzles.Solutions.Rop.RopResult{``1,``4},FSharp.Puzzles.Solutions.Rop.RopResult{``2,``4})">
<summary>
 given three values wrapped in results apply a function to all
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.lift2R``4(Microsoft.FSharp.Core.FSharpFunc{``0,Microsoft.FSharp.Core.FSharpFunc{``1,``2}},FSharp.Puzzles.Solutions.Rop.RopResult{``0,``3},FSharp.Puzzles.Solutions.Rop.RopResult{``1,``3})">
<summary>
 given two values wrapped in results apply a function to both
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.liftR``3(Microsoft.FSharp.Core.FSharpFunc{``0,``1},FSharp.Puzzles.Solutions.Rop.RopResult{``0,``2})">
<summary>
 given a function that transforms a value
 apply it only if the result is on the Success branch
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.op_LessMultiplyGreater``3">
<summary>
 infix version of apply
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.applyR``3(FSharp.Puzzles.Solutions.Rop.RopResult{Microsoft.FSharp.Core.FSharpFunc{``0,``1},``2},FSharp.Puzzles.Solutions.Rop.RopResult{``0,``2})">
<summary>
 given a function wrapped in a result
 and a value wrapped in a result
 apply the function to the value only if both are Success
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.bindR``3(Microsoft.FSharp.Core.FSharpFunc{``0,FSharp.Puzzles.Solutions.Rop.RopResult{``1,``2}},FSharp.Puzzles.Solutions.Rop.RopResult{``0,``2})">
<summary>
 given a function that generates a new RopResult
 apply it only if the result is on the Success branch
 merge any existing messages with the new result
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.mergeMessages``2(Microsoft.FSharp.Collections.FSharpList{``0},FSharp.Puzzles.Solutions.Rop.RopResult{``1,``0})">
<summary>
 merge messages with a result
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.either``3(Microsoft.FSharp.Core.FSharpFunc{System.Tuple{``0,Microsoft.FSharp.Collections.FSharpList{``1}},``2},Microsoft.FSharp.Core.FSharpFunc{Microsoft.FSharp.Collections.FSharpList{``1},``2},FSharp.Puzzles.Solutions.Rop.RopResult{``0,``1})">
<summary>
 A function that applies either fSuccess or fFailure 
 depending on the case.
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.fail``2(``0)">
<summary>
 create a Failure with a message
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.succeedWithMsg``2(``0,``1)">
<summary>
 create a Success with a message
</summary>
</member>
<member name="M:FSharp.Puzzles.Solutions.Rop.succeed``2(``0)">
<summary>
 create a Success with no messages
</summary>
</member>
</members>
</doc>
